1>
We write the entire componentmanager ourselves when a component needs to be implemented.
This allows for best performance but most work per component.
This will probably require us to write our own serialization methods and inspectors for level editor etc.

2>
IDLC compiles the componentcontainer which we inherit in our components that need to be implemented.
This gives us less boilerplate to be written by hand.
We write the functionality for the components by explicitly iterating the data instances.

This also allows us to do special autogenerated stuff in the setters and getters for each attribute (networking and such)
Doing this might however limit the programmer to using the setters and getters specifically.

This also allows us to easily write serializers or auto generate them.

3>
IDLC compiles the componentManager which contains a plugin which is just the functionality for our components.
The plugin is written by hand by the programmer.
The componentmanager calls the plugins methods per component instance, so that the component functions (update/render etc.) will
work similarly to how they work in the old component system. No need for the programmer to loop the entire component data array by hand.


//---------------------------------------------------------------------------------------------------------------------------------

Maybe:
- Break up ComponentData into ComponentRegistry and just a data array.
    This might allow us to move the registry to the base component and just setup the data component in the inheriting component




TODO:
Kolla igenom BitField-klassen och se vad man kan förbättra (constexpr mm.)
