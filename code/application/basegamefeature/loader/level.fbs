namespace Game.Serialization;

file_identifier "LVLB";

/*
    Describes an attribute in ComponentData.

    used for validation.
*/
table AttributeDefinition
{
    fourcc:uint; // attribute identifier
    name:string; // name of attribute
    type:string; // attribute type.
}

/*
    Contains data for components.

    Note that the component instance owner needs to be correctly indexed (0 -> EntityBundle.numEntities). 

    Each in-game component's data will be serialized into the dataStream in the same order
    as the attributes list defines.
*/
table ComponentData
{
    fourcc:uint; // component identifier
    numInstances:uint; // number of instances for this component.
    attributes:[AttributeDefinition];
    owners:[uint32]; // index -> entity map.
    dataStream:[ubyte]; // contains a custom data blob format that each component defines.
}


/*
    EntityBundle stores entities that can be loaded and instantiated.

    Since the component system is structured as a SOA "containers", and entities are just IDs,
    we simply store the number of entities to instantiate and the buffers that each component 
    should load.

    This bundle also supports a simple hierarchy structure by storing each entity's parent's "offset"
    in the parentIndices list. So for example, if entity no. 5's parent is entity no. 2; the value
    at index 5 will be 2 (parentIndices[5] == 2).
    
    The components list contains the data that each component should load.
    components are built 
*/
table EntityBundle
{
    numEntities:uint; // number of entities to instantiate
    numComponents:uint; // number of components in the components list
    parentIndices:[uint]; // parent index for each entity. can be used to build a hierarchy tree.
    components:[ComponentData]; // components and component instances.
}


/*
    A level contains entities, settings, postprocessing etc.
*/
table Level
{
    entities:EntityBundle; // Entities to instantiate
}

root_type Level;