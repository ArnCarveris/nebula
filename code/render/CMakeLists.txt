#-------------------------------------------------------------------------------
# Render
#-------------------------------------------------------------------------------

fips_begin_module(render)
	fips_vs_warning_level(3)
	fips_include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CODE_ROOT}/resource ${CODE_ROOT}/foundation)	
	fips_deps(foundation resource anyfx)
	if(N_USE_VULKAN)
		#include(FindVulkan)
		FIND_PACKAGE(Vulkan)
		fips_include_directories(${Vulkan_INCLUDE_DIR})
		fips_libs(${Vulkan_LIBRARY})
	endif()
		fips_files(precompiled.h stdneb.h stdneb.cc)
IF(FALSE) # incrementally enable modules as they get written
		fips_dir(algorithm)
			fips_files(
				algorithm.cc
				algorithm.h
				algorithms.h
				bloomalgorithm.cc
				bloomalgorithm.h
				hbaoalgorithm.cc
				hbaoalgorithm.h
				tonemapalgorithm.cc
				tonemapalgorithm.h
			)
		fips_dir(animation)
			fips_files(
				animeventhandlerbase.cc
				animeventhandlerbase.h
				animeventinfo.h
				animeventserver.cc
				animeventserver.h
				animjob.cc
				animjob.h
				animjobenqueuemode.h
				animsequencer.cc
				animsequencer.h
				playclipjob.cc
				playclipjob.h
			)
		fips_dir(apprender)
			fips_files(
				renderapplication.cc
				renderapplication.h
				viewerapplication.cc
				viewerapplication.h
			)
		fips_dir(coreanimation)
			fips_files(
				animclip.cc
				animclip.h
				animcurve.h
				animevent.h
				animeventemitter.cc
				animeventemitter.h
				animkeybuffer.cc
				animkeybuffer.h
				animresource.cc
				animresource.h
				animsamplebuffer.cc
				animsamplebuffer.h
				animsamplemixinfo.h
				animutil.cc
				animutil.h
				curvetype.cc
				curvetype.h
				infinitytype.cc
				infinitytype.h
				managedanimresource.cc
				managedanimresource.h
				naxfileformatstructs.h
				sampletype.cc
				sampletype.h
				streamanimationloader.cc
				streamanimationloader.h
			)
ENDIF()
		fips_dir(coregraphics/base GROUP "coregraphics/base")
			fips_files(				
				displaydevicebase.cc
				displaydevicebase.h
				renderdevicebase.cc
				renderdevicebase.h
				shaderserverbase.cc
				shaderserverbase.h
				shaperendererbase.cc
				shaperendererbase.h
				textrendererbase.cc
				textrendererbase.h
				transformdevicebase.cc
				transformdevicebase.h
			)
		fips_dir(coregraphics)
			fips_files(
				adapter.cc
				adapter.h
				adapterinfo.h
				antialiasquality.cc
				antialiasquality.h
				barrier.h
				gpubuffertypes.h
				cmdbuffer.h
				config.h
				constantbuffer.h
				displaydevice.cc
				displaydevice.h
				displayevent.h
				displayeventhandler.cc
				displayeventhandler.h
				displaymode.h
				event.h
				framebatchtype.h
				imagefileformat.cc
				imagefileformat.h
				indexbuffer.cc
				indexbuffer.h
				indextype.h
				memoryindexbufferpool.cc
				memoryindexbufferpool.h
				memorymeshpool.cc
				memorymeshpool.h
				memorytexturepool.cc
				memorytexturepool.h
				memoryvertexbufferpool.cc
				memoryvertexbufferpool.h
				mesh.cc
				mesh.h
				pass.h
				pixelformat.cc
				pixelformat.h
				primitivegroup.h
				primitivetopology.cc
				primitivetopology.h
				renderdevice.cc
				renderdevice.h
				renderevent.h
				rendereventhandler.cc
				rendereventhandler.h
				rendershape.cc
				rendershape.h
				rendertexture.cc
				rendertexture.h
				shader.cc
				shader.h
				shaderfeature.cc
				shaderfeature.h
				shaderidentifier.cc
				shaderidentifier.h
				shaderreadwritebuffer.h
				shaderreadwritetexture.h
				shadersemantics.h
				shaderserver.cc
				shaderserver.h
				shaperenderer.cc
				shaperenderer.h
				streammeshpool.cc
				streammeshpool.h
				shaderpool.cc
				shaderpool.h
				streamtexturepool.cc
				streamtexturepool.h
				streamtexturesaver.h
				stretchybuffer.h
				textelement.cc
				textelement.h
				textrenderer.cc
				textrenderer.h
				texture.cc
				texture.h
				transformdevice.cc
				transformdevice.h
				vertexbuffer.cc
				vertexbuffer.h
				vertexcomponent.h
				vertexlayout.cc
				vertexlayout.h
				vertexsignaturepool.cc
				vertexsignaturepool.h
				window.h
			)
		fips_dir(coregraphics/debug GROUP "coregraphics/debug")
			fips_files(
				displaypagehandler.cc
				displaypagehandler.h
				meshpagehandler.cc
				meshpagehandler.h
				shaderpagehandler.cc
				shaderpagehandler.h
				texturepagehandler.cc
				texturepagehandler.h
			)
		fips_dir(coregraphics/glfw GROUP "coregraphics/glfw")
			fips_files(
				glfwdisplaydevice.cc
				glfwdisplaydevice.h
				glfwwindow.cc
				glfwwindow.h
			)
		fips_dir(coregraphics/legacy GROUP "coregraphics/legacy")
			fips_files(
				nvx2fileformatstructs.h
				nvx2streamreader.cc
				nvx2streamreader.h
			)
	if (N_USE_D3D11)
		fips_dir(coregraphics/base GROUP "coregraphics/d3d11")
			fips_files(
				d3d11barrier.cc
				d3d11barrier.h
				d3d11buffer.cc
				d3d11buffer.h
				d3d11bufferlock.cc
				d3d11bufferlock.h
				d3d11constantbuffer.cc
				d3d11constantbuffer.h
				d3d11displaydevice.cc
				d3d11displaydevice.h
				d3d11event.cc
				d3d11event.h
				d3d11feedbackbuffer.cc
				d3d11feedbackbuffer.h
				d3d11indexbuffer.cc
				d3d11indexbuffer.h
				d3d11memoryindexbufferloader.cc
				d3d11memoryindexbufferloader.h
				d3d11memoryvertexbufferloader.cc
				d3d11memoryvertexbufferloader.h
				d3d11mesh.cc
				d3d11mesh.h
				d3d11pass.cc
				d3d11pass.h
				d3d11renderdevice.cc
				d3d11renderdevice.h
				d3d11rendertexture.cc
				d3d11rendertexture.h
				d3d11resource.cc
				d3d11resource.h
				d3d11shader.cc
				d3d11shader.h
				d3d11shaderreadwritebuffer.cc
				d3d11shaderreadwritebuffer.h
				d3d11shaderreadwritetexture.cc
				d3d11shaderreadwritetexture.h
				d3d11shaderserver.cc
				d3d11shaderserver.h
				d3d11shaderstate.cc
				d3d11shaderstate.h
				d3d11shadervariable.cc
				d3d11shadervariable.h
				d3d11shadervariation.cc
				d3d11shadervariation.h
				d3d11shaperenderer.cc
				d3d11shaperenderer.h
				d3d11streamtexturesaver.cc
				d3d11streamtexturesaver.h
				d3d11textrenderer.cc
				d3d11textrenderer.h
				d3d11texture.cc
				d3d11texture.h
				d3d11transformdevice.cc
				d3d11transformdevice.h
				d3d11vertexbuffer.cc
				d3d11vertexbuffer.h
				d3d11vertexcomponent.h
				d3d11vertexlayout.cc
				d3d11vertexlayout.h
				d3d11vertexlayoutserver.cc
				d3d11vertexlayoutserver.h
				d3d11window.cc
				d3d11window.h
			)
	elseif (N_USE_VULKAN)
		fips_dir(coregraphics/vk GROUP "coregraphics/vk")
			fips_files(
				vkbarrier.cc
				vkbarrier.h
				vkcmdbuffer.cc
				vkcmdbuffer.h
				vkcmdbufferthread.cc
				vkcmdbufferthread.h
				vkevent.cc
				vkevent.h
				vkdeferredcommand.cc
				vkdeferredcommand.h
				vkmemoryindexbufferpool.cc
				vkmemoryindexbufferpool.h
				vkmemorytexturepool.cc
				vkmemorytexturepool.h
				vkmemoryvertexbufferpool.cc
				vkmemoryvertexbufferpool.h
				vkpass.cc
				vkpass.h
				vkpipelinedatabase.cc
				vkpipelinedatabase.h
				vkrenderdevice.cc
				vkrenderdevice.h
				vkrendertexture.cc
				vkrendertexture.h
				vkscheduler.cc
				vkscheduler.h
				vkshader.cc
				vkshader.h
				vkshaderreadwritebuffer.cc
				vkshaderreadwritebuffer.h
				vkshaderreadwritetexture.cc
				vkshaderreadwritetexture.h
				vkshaderprogram.cc
				vkshaderprogram.h
				vkshaderserver.cc
				vkshaderserver.h
				vkshaderstate.cc
				vkshaderstate.h
				vkshadervariable.cc
				vkshadervariable.h
				vkshaperenderer.cc
				vkshaperenderer.h
				vkshaderpool.cc
				vkshaderpool.h
				vkstreamtexturepool.cc
				vkstreamtexturepool.h
				vkstreamtexturesaver.cc
				vkstreamtexturesaver.h
				vksubcontexthandler.cc
				vksubcontexthandler.h
				vktextrenderer.cc
				vktextrenderer.h
				vktexture.cc
				vktexture.h
				vktransformdevice.cc
				vktransformdevice.h
				vktypes.cc
				vktypes.h
				vkconstantbuffer.cc
				vkconstantbuffer.h
				vkutilities.cc
				vkutilities.h
				vkvertexsignaturepool.cc
				vkvertexsignaturepool.h
			)
	endif()

		fips_dir(frame)
			fips_files(
				framebarrier.cc
				framebarrier.h
				frameblit.cc
				frameblit.h
				framecompute.cc
				framecompute.h
				framecomputealgorithm.cc
				framecomputealgorithm.h
				framecopy.cc
				framecopy.h
				frameevent.cc
				frameevent.h
				frameglobalstate.cc
				frameglobalstate.h
				frameop.cc
				frameop.h
				framepass.cc
				framepass.h
				framescript.cc
				framescript.h
				framescriptloader.cc
				framescriptloader.h
				frameserver.cc
				frameserver.h
				framesubpass.cc
				framesubpass.h
				framesubpassalgorithm.cc
				framesubpassalgorithm.h
				framesubpassbatch.cc
				framesubpassbatch.h
				framesubpassfullscreeneffect.cc
				framesubpassfullscreeneffect.h
				framesubpassorderedbatch.cc
				framesubpassorderedbatch.h
				framesubpassplugins.cc
				framesubpassplugins.h
				framesubpasssystem.cc
				framesubpasssystem.h
				frameswapbuffers.cc
				frameswapbuffers.h
			)
			
		fips_dir(graphics)
			fips_files(
				batchgroup.cc
				batchgroup.h
				camera.cc
				camera.h
				graphicscontext.cc
				graphicscontext.h
				graphicsentity.h
				graphicsserver.cc
				graphicsserver.h
				lightcontext.cc
				lightcontext.h
				lightprobecontext.cc
				lightprobecontext.h
				stage.cc
				stage.h
				view.cc
				view.h
			)
		fips_dir(input/base GROUP "input/base")
			fips_files(
				gamepadbase.cc
				gamepadbase.h
				inputserverbase.cc
				inputserverbase.h
				keyboardbase.cc
				keyboardbase.h
				mousebase.cc
				mousebase.h
			)
IF(FALSE)
		fips_dir(input/glfw GROUP "input/glfw")
			fips_files(
				glfwinputdisplayeventhandler.cc
				glfwinputdisplayeventhandler.h
				glfwinputserver.cc
				glfwinputserver.h
			)
		fips_dir(input)
			fips_files(
				char.h
				gamepad.cc
				gamepad.h
				inputevent.h
				inputhandler.cc
				inputhandler.h
				inputpriority.h
				inputserver.cc
				inputserver.h
				key.cc
				key.h
				keyboard.cc
				keyboard.h
				mouse.cc
				mouse.h
				mousebutton.cc
				mousebutton.h
			)
		fips_dir(instancing)
			fips_files(
				instancerenderer.cc
				instancerenderer.h
				instanceserver.cc
				instanceserver.h
			)
		fips_dir(instancing/base GROUP "instancing/base")
			fips_files(
				instancerendererbase.cc
				instancerendererbase.h
				instanceserverbase.cc
				instanceserverbase.h
			)
	if (N_USE_VULKAN)
		fips_dir(instancing/vk GROUP "instancing/vk")
			fips_files(
				vkinstancerenderer.cc
				vkinstancerenderer.h
				vkinstanceserver.cc
				vkinstanceserver.h
			)
	elseif (N_USE_D3D11)
		fips_dir(instancing/d3d11 GROUP "instancing/d3d11")
			fips_files(
				d3d11instancerenderer.cc
				d3d11instancerenderer.h
				d3d11instanceserver.cc
				d3d11instanceserver.h
			)
	endif()
		fips_dir(jobs GROUPS "jobs")
			fips_files(
			../coreanimation/jobs/animjobsample.cc
			../coreanimation/jobs/animjobsamplemix.cc
			../coreanimation/jobs/animjobutil.h
			../skinning/jobs/charevalskeletonjob.cc
			../visibility/jobs/visibilityboxsystemjob.cc
			../visibility/jobs/visibilityquadtreejob.cc
			../particles/jobs/particlejob.cc
			)			
		fips_dir(lighting/base GROUP "lighting/base")
			fips_files(
				lightserverbase.cc
				lightserverbase.h
				shadowserverbase.cc
				shadowserverbase.h
			)
	if (N_USE_VULKAN)
		fips_dir(lighting/vk GROUP "lighting/vk")
			fips_files(
				vklightserver.cc
				vklightserver.h
				vkshadowserver.cc
				vkshadowserver.h
			)
	endif()
		fips_dir(lighting/handlers GROUP "lighting/handlers")
			fips_files(
				abstractlightentityhandler.cc
				globallightentityhandler.cc
				pointlightentityhandler.cc
				spotlightentityhandler.cc
			)
		fips_dir(lighting)
			fips_files(
				csmutil.cc
				csmutil.h
				environmentprobe.cc
				environmentprobe.h
				lightserver.cc
				lightserver.h
				lighttype.cc
				lighttype.h
				shadowserver.cc
				shadowserver.h
			)
ENDIF()
		fips_dir(materials)
			fips_files(
				managedsurface.cc
				managedsurface.h
				material.cc
				material.h
				materialfeature.cc
				materialfeature.h
				materialinstance.cc
				materialinstance.h
				materialloader.cc
				materialloader.h
				materialpalette.cc
				materialpalette.h
				materialserver.cc
				materialserver.h
				materialtype.cc
				materialtype.h
				materialvariable.cc
				materialvariable.h
				materialvariableinstance.cc
				materialvariableinstance.h
				streamsurfaceloader.cc
				streamsurfaceloader.h
				streamsurfacesaver.cc
				streamsurfacesaver.h
				surface.cc
				surface.h
				surfaceconstant.cc
				surfaceconstant.h
				surfaceconstantinstance.cc
				surfaceconstantinstance.h
				surfaceinstance.cc
				surfaceinstance.h
				surfacename.cc
				surfacename.h
			)
			
		fips_dir(models/nodes GROUP "models/nodes")
			fips_files(
				characternode.cc
				characternode.h
				characterskinnode.cc
				characterskinnode.h
				modelnode.cc
				modelnode.h
				particlesystemnode.cc
				particlesystemnode.h
				primitivenode.cc
				primitivenode.h
				shaderstatenode.cc
				shaderstatenode.h
				transformnode.cc
				transformnode.h
			)
		fips_dir(models)
			fips_files(
				framebatchtype.cc
				model.cc
				model.h
				modelcontext.cc
				modelcontext.h
				streammodelpool.cc
				streammodelpool.h
				modelserver.cc
				modelserver.h
			)
			
IF(FALSE)
		fips_dir(particles/base GROUP "particles/base")
			fips_files(
					particlerendererbase.cc
					particlerendererbase.h
					particlerenderinfobase.h
					particlesysteminstancebase.cc
					particlesysteminstancebase.h
			)
	if (N_USE_VULKAN)
		fips_dir(particles/vk GROUP "particles/vk")
			fips_files(
				vkparticlerenderer.cc
				vkparticlerenderer.h
				vkparticlesysteminstance.cc
				vkparticlesysteminstance.h
			)
	endif()
		fips_dir(particles)
			fips_files(
				emitterattrs.cc
				emitterattrs.h
				emittermesh.cc
				emittermesh.h
				envelopecurve.cc
				envelopecurve.h
				envelopesamplebuffer.cc
				envelopesamplebuffer.h
				particle.h
				particlerenderer.cc
				particlerenderer.h
				particlerenderinfo.h
				particleserver.cc
				particleserver.h
				particlesystem.cc
				particlesystem.h
				particlesysteminstance.cc
				particlesysteminstance.h
				particlesystemnode.cc
				particlesystemnode.h
				particlesystemnodeinstance.cc
				particlesystemnodeinstance.h
				particlesystemstate.h
			)
		fips_dir(picking)
			fips_files(
				pickingserver.cc
				pickingserver.h
			)
		fips_dir(rendermodules/rt GROUP "rendermodules/rt")
			fips_files(
				rtplugin.cc
				rtplugin.h
				rtpluginregistry.cc
				rtpluginregistry.h
			)
		fips_dir(rendermodules)
			fips_files(
				rendermodule.cc
				rendermodule.h
			)
		fips_dir(renderutil)
			fips_files(
				drawfullscreenquad.cc
				drawfullscreenquad.h
				freecamerautil.cc
				freecamerautil.h
				mayacamerautil.cc
				mayacamerautil.h
				mouserayutil.cc
				mouserayutil.h
				nodelookuputil.cc
				nodelookuputil.h
			)
		fips_dir(skinning)
		
		fips_dir(visibility/visibilitysystems GROUP "visibility/visibilitysystems")
			fips_files(
				visibilitybox.cc
				visibilitybox.h
				visibilityboxsystem.cc
				visibilityboxsystem.h
				visibilitybruteforcesystem.cc
				visibilitybruteforcesystem.h
				visibilitycell.cc
				visibilitycell.h
				visibilitycluster.cc
				visibilitycluster.h
				visibilityclustersystem.cc
				visibilityclustersystem.h
				visibilityquadtreesystem.cc
				visibilityquadtreesystem.h
				visibilitysystembase.cc
				visibilitysystembase.h
			)
		fips_dir(visibility)
			fips_files(
				observer.cc
				observer.h
				visibility.h
				visibilitycontainer.cc
				visibilitycontainer.h
				visibilitycontext.cc
				visibilitycontext.h
				visibilityserver.cc
				visibilityserver.h
			)
ENDIF()
fips_end_module()